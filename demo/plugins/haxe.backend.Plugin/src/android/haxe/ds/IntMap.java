// Generated by Haxe 4.0.0 (git build development @ be76e496e)
package haxe.ds;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class IntMap<T> extends haxe.lang.HxObject implements haxe.IMap<java.lang.Object, T>
{
	static
	{
		//line 36 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		haxe.ds.IntMap.HASH_UPPER = 0.7;
	}
	
	public IntMap(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public IntMap()
	{
		//line 52 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		haxe.ds.IntMap.__hx_ctor_haxe_ds_IntMap(((haxe.ds.IntMap<T>) (this) ));
	}
	
	
	protected static <T_c> void __hx_ctor_haxe_ds_IntMap(haxe.ds.IntMap<T_c> __hx_this)
	{
		//line 55 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		__hx_this.cachedIndex = -1;
	}
	
	
	public static double HASH_UPPER;
	
	public static void _assert(boolean x)
	{
	}
	
	
	public static int defaultK()
	{
		//line 432 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		return 0;
	}
	
	
	public static void arrayCopy(java.lang.Object sourceArray, int sourceIndex, java.lang.Object destinationArray, int destinationIndex, int length)
	{
		//line 435 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		java.lang.System.arraycopy(((java.lang.Object) (sourceArray) ), ((int) (sourceIndex) ), ((java.lang.Object) (destinationArray) ), ((int) (destinationIndex) ), ((int) (length) ));
	}
	
	
	public static int getInc(int k, int mask)
	{
		//line 438 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		return ( (( ( ( k >> 3 ) ^ ( k << 3 ) ) | 1 )) & mask );
	}
	
	
	public static int hash(int i)
	{
		//line 441 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		return i;
	}
	
	
	public static int getFlag(int[] flags, int i)
	{
		//line 451 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		return ( ( flags[( i >> 4 )] >>> (( (( i & 15 )) << 1 )) ) & 3 );
	}
	
	
	public static boolean isDel(int flag)
	{
		//line 456 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		return ( (( flag & 1 )) != 0 );
	}
	
	
	public static boolean isEmpty(int flag)
	{
		//line 461 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		return ( (( flag & 2 )) != 0 );
	}
	
	
	public static boolean isEither(int flag)
	{
		//line 465 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		return ( flag != 0 );
	}
	
	
	public static void setIsDelFalse(int[] flags, int i)
	{
		//line 470 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		flags[( i >> 4 )] &=  ~ ((( 1 << (( (( i & 15 )) << 1 )) ))) ;
	}
	
	
	public static void setIsEmptyFalse(int[] flags, int i)
	{
		//line 475 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		flags[( i >> 4 )] &=  ~ ((( 2 << (( (( i & 15 )) << 1 )) ))) ;
	}
	
	
	public static void setIsBothFalse(int[] flags, int i)
	{
		//line 480 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		flags[( i >> 4 )] &=  ~ ((( 3 << (( (( i & 15 )) << 1 )) ))) ;
	}
	
	
	public static void setIsDelTrue(int[] flags, int i)
	{
		//line 485 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		flags[( i >> 4 )] |= ( 1 << (( (( i & 15 )) << 1 )) );
	}
	
	
	public static int roundUp(int x)
	{
		//line 490 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		 -- x;
		//line 491 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		x |= ( x >>> 1 );
		//line 492 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		x |= ( x >>> 2 );
		//line 493 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		x |= ( x >>> 4 );
		//line 494 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		x |= ( x >>> 8 );
		//line 495 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		x |= ( x >>> 16 );
		//line 496 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		return  ++ x;
	}
	
	
	public static int flagsSize(int m)
	{
		//line 500 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		if (( m < 16 )) 
		{
			//line 500 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			return 1;
		}
		else
		{
			//line 500 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			return ( m >> 4 );
		}
		
	}
	
	
	public int[] flags;
	
	public int[] _keys;
	
	public T[] vals;
	
	public int nBuckets;
	
	public int size;
	
	public int nOccupied;
	
	public int upperBound;
	
	public int cachedKey;
	
	public int cachedIndex;
	
	public void set(int key, T value)
	{
		//line 61 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		int targetIndex = 0;
		//line 62 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		if (( this.nOccupied >= this.upperBound )) 
		{
			//line 64 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			if (( this.nBuckets > ( this.size << 1 ) )) 
			{
				//line 66 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				this.resize(( this.nBuckets - 1 ));
			}
			else
			{
				//line 68 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				this.resize(( this.nBuckets + 1 ));
			}
			
		}
		
		//line 72 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		int[] flags = this.flags;
		//line 72 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		int[] _keys = this._keys;
		//line 73 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		{
			//line 74 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			int mask = ( this.nBuckets - 1 );
			//line 74 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			int curIndex = ( key & mask );
			//line 78 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			int delKey = -1;
			//line 78 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			int curFlag = 0;
			//line 81 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			if (( (( ( ( flags[( curIndex >> 4 )] >>> (( (( curIndex & 15 )) << 1 )) ) & 3 ) & 2 )) != 0 )) 
			{
				//line 82 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				targetIndex = curIndex;
			}
			else
			{
				//line 84 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				int inc = ( (( ( ( key >> 3 ) ^ ( key << 3 ) ) | 1 )) & mask );
				//line 86 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				while (true)
				{
					//line 86 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					boolean tmp = false;
					//line 86 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (( _keys[curIndex] != key )) 
					{
						//line 86 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						curFlag = ( ( flags[( curIndex >> 4 )] >>> (( (( curIndex & 15 )) << 1 )) ) & 3 );
						//line 86 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						tmp = ( (( curFlag & 2 )) != 0 );
					}
					else
					{
						//line 86 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						tmp = true;
					}
					
					//line 86 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if ( ! (( ! (tmp) )) ) 
					{
						//line 86 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						break;
					}
					
					//line 88 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (( ( delKey == -1 ) && ( (( curFlag & 1 )) != 0 ) )) 
					{
						//line 90 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						delKey = curIndex;
					}
					
					//line 92 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					curIndex = ( ( curIndex + inc ) & mask );
				}
				
				//line 98 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				if (( ( delKey != -1 ) && ( (( ( ( flags[( curIndex >> 4 )] >>> (( (( curIndex & 15 )) << 1 )) ) & 3 ) & 2 )) != 0 ) )) 
				{
					//line 99 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					targetIndex = delKey;
				}
				else
				{
					//line 101 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					targetIndex = curIndex;
				}
				
			}
			
		}
		
		//line 106 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		int flag = ( ( flags[( targetIndex >> 4 )] >>> (( (( targetIndex & 15 )) << 1 )) ) & 3 );
		//line 107 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		if (( (( flag & 2 )) != 0 )) 
		{
			//line 109 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			_keys[targetIndex] = key;
			//line 110 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			this.vals[targetIndex] = value;
			//line 111 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			flags[( targetIndex >> 4 )] &=  ~ ((( 3 << (( (( targetIndex & 15 )) << 1 )) ))) ;
			//line 112 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			this.size++;
			//line 113 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			this.nOccupied++;
		}
		else
		{
			//line 114 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			if (( (( flag & 1 )) != 0 )) 
			{
				//line 115 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				_keys[targetIndex] = key;
				//line 116 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				this.vals[targetIndex] = value;
				//line 117 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				flags[( targetIndex >> 4 )] &=  ~ ((( 3 << (( (( targetIndex & 15 )) << 1 )) ))) ;
				//line 118 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				this.size++;
			}
			else
			{
				//line 123 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				this.vals[targetIndex] = value;
			}
			
		}
		
	}
	
	
	public int lookup(int key)
	{
		//line 129 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		if (( this.nBuckets != 0 )) 
		{
			//line 131 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			int[] flags = this.flags;
			//line 131 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			int[] _keys = this._keys;
			//line 133 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			int mask = ( this.nBuckets - 1 );
			//line 133 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			int index = ( key & mask );
			//line 133 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			int curFlag = -1;
			//line 133 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			int inc = ( (( ( ( key >> 3 ) ^ ( key << 3 ) ) | 1 )) & mask );
			//line 133 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			int last = index;
			//line 139 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			while (true)
			{
				//line 141 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				if (( _keys[index] == key )) 
				{
					//line 142 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					curFlag = ( ( flags[( index >> 4 )] >>> (( (( index & 15 )) << 1 )) ) & 3 );
					//line 142 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (( (( curFlag & 2 )) != 0 )) 
					{
						//line 144 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						index = ( ( index + inc ) & mask );
						//line 139 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						if ( ! ((( index != last ))) ) 
						{
							//line 139 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
							break;
						}
						else
						{
							//line 145 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
							continue;
						}
						
					}
					else
					{
						//line 146 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						if (( (( curFlag & 1 )) != 0 )) 
						{
							//line 147 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
							return -1;
						}
						else
						{
							//line 149 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
							return index;
						}
						
					}
					
				}
				else
				{
					//line 152 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					index = ( ( index + inc ) & mask );
				}
				
				//line 139 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				if ( ! ((( index != last ))) ) 
				{
					//line 139 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
			}
			
		}
		
		//line 157 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		return -1;
	}
	
	
	public java.lang.Object get(int key)
	{
		//line 162 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		int idx = -1;
		//line 164 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		boolean tmp = false;
		//line 164 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		if (( this.cachedKey == key )) 
		{
			//line 164 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			idx = this.cachedIndex;
			//line 164 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			tmp = ( idx != -1 );
		}
		else
		{
			//line 164 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			tmp = false;
		}
		
		//line 164 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		if (tmp) 
		{
			//line 166 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			return this.vals[idx];
		}
		
		//line 170 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		idx = this.lookup(key);
		//line 171 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		if (( idx != -1 )) 
		{
			//line 174 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			this.cachedKey = key;
			//line 175 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			this.cachedIndex = idx;
			//line 177 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			return this.vals[idx];
		}
		
		//line 180 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		return null;
	}
	
	
	public void resize(int newNBuckets)
	{
		//line 270 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		int[] newFlags = null;
		//line 271 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		int j = 1;
		//line 272 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		{
			//line 273 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			int x = newNBuckets;
			//line 273 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			 -- x;
			//line 273 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			x |= ( x >>> 1 );
			//line 273 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			x |= ( x >>> 2 );
			//line 273 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			x |= ( x >>> 4 );
			//line 273 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			x |= ( x >>> 8 );
			//line 273 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			x |= ( x >>> 16 );
			//line 273 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			newNBuckets =  ++ x;
			//line 274 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			if (( newNBuckets < 4 )) 
			{
				//line 274 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				newNBuckets = 4;
			}
			
			//line 275 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			if (( this.size >= ( ( newNBuckets * 0.7 ) + 0.5 ) )) 
			{
				//line 277 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				j = 0;
			}
			else
			{
				//line 279 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				int nfSize = ( (( newNBuckets < 16 )) ? (1) : (( newNBuckets >> 4 )) );
				//line 280 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				newFlags = new int[nfSize];
				//line 281 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				{
					//line 281 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					int _g1 = 0;
					//line 281 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					int _g = nfSize;
					//line 281 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					while (( _g1 < _g ))
					{
						//line 281 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						int i = _g1++;
						//line 283 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						newFlags[i] = -1431655766;
					}
					
				}
				
				//line 285 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				if (( this.nBuckets < newNBuckets )) 
				{
					//line 287 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					int[] k = new int[newNBuckets];
					//line 288 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (( this._keys != null )) 
					{
						//line 290 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						java.lang.System.arraycopy(((java.lang.Object) (this._keys) ), ((int) (0) ), ((java.lang.Object) (k) ), ((int) (0) ), ((int) (this.nBuckets) ));
					}
					
					//line 292 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					this._keys = k;
					//line 294 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					T[] v = ((T[]) (((java.lang.Object) (new java.lang.Object[newNBuckets]) )) );
					//line 295 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (( this.vals != null )) 
					{
						//line 297 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						java.lang.System.arraycopy(((java.lang.Object) (this.vals) ), ((int) (0) ), ((java.lang.Object) (v) ), ((int) (0) ), ((int) (this.nBuckets) ));
					}
					
					//line 299 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					this.vals = v;
				}
				
			}
			
		}
		
		//line 304 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		if (( j != 0 )) 
		{
			//line 308 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			this.cachedKey = 0;
			//line 309 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			this.cachedIndex = -1;
			//line 312 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			j = -1;
			//line 313 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			int nBuckets = this.nBuckets;
			//line 313 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			int[] _keys = this._keys;
			//line 313 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			T[] vals = this.vals;
			//line 313 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			int[] flags = this.flags;
			//line 315 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			int newMask = ( newNBuckets - 1 );
			//line 316 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			while ((  ++ j < nBuckets ))
			{
				//line 318 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				if (( (( ( flags[( j >> 4 )] >>> (( (( j & 15 )) << 1 )) ) & 3 )) == 0 )) 
				{
					//line 320 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					int key = _keys[j];
					//line 321 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					T val = vals[j];
					//line 325 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					vals[j] = null;
					//line 326 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					flags[( j >> 4 )] |= ( 1 << (( (( j & 15 )) << 1 )) );
					//line 327 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					while (true)
					{
						//line 329 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						int k1 = key;
						//line 330 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						int inc = ( (( ( ( k1 >> 3 ) ^ ( k1 << 3 ) ) | 1 )) & newMask );
						//line 331 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						int i1 = ( k1 & newMask );
						//line 332 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						while (( (( ( ( newFlags[( i1 >> 4 )] >>> (( (( i1 & 15 )) << 1 )) ) & 3 ) & 2 )) == 0 ))
						{
							//line 334 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
							i1 = ( ( i1 + inc ) & newMask );
						}
						
						//line 336 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						newFlags[( i1 >> 4 )] &=  ~ ((( 2 << (( (( i1 & 15 )) << 1 )) ))) ;
						//line 338 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						if (( ( i1 < nBuckets ) && ( (( ( flags[( i1 >> 4 )] >>> (( (( i1 & 15 )) << 1 )) ) & 3 )) == 0 ) )) 
						{
							//line 340 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
							{
								//line 341 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
								int tmp = _keys[i1];
								//line 342 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
								_keys[i1] = key;
								//line 343 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
								key = tmp;
							}
							
							//line 345 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
							{
								//line 346 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
								T tmp1 = vals[i1];
								//line 347 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
								vals[i1] = val;
								//line 348 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
								val = tmp1;
							}
							
							//line 351 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
							flags[( i1 >> 4 )] |= ( 1 << (( (( i1 & 15 )) << 1 )) );
						}
						else
						{
							//line 353 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
							_keys[i1] = key;
							//line 354 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
							vals[i1] = val;
							//line 355 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
							break;
						}
						
					}
					
				}
				
			}
			
			//line 361 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			if (( nBuckets > newNBuckets )) 
			{
				//line 363 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				{
					//line 364 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					int[] k2 = new int[newNBuckets];
					//line 365 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					java.lang.System.arraycopy(((java.lang.Object) (_keys) ), ((int) (0) ), ((java.lang.Object) (k2) ), ((int) (0) ), ((int) (newNBuckets) ));
					//line 366 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					this._keys = k2;
				}
				
				//line 368 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				{
					//line 369 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					T[] v1 = ((T[]) (((java.lang.Object) (new java.lang.Object[newNBuckets]) )) );
					//line 370 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					java.lang.System.arraycopy(((java.lang.Object) (vals) ), ((int) (0) ), ((java.lang.Object) (v1) ), ((int) (0) ), ((int) (newNBuckets) ));
					//line 371 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					this.vals = v1;
				}
				
			}
			
			//line 375 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			this.flags = newFlags;
			//line 376 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			this.nBuckets = newNBuckets;
			//line 377 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			this.nOccupied = this.size;
			//line 378 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			this.upperBound = ((int) (( ( newNBuckets * 0.7 ) + .5 )) );
		}
		
	}
	
	
	@Override public double __hx_setField_f(java.lang.String field, double value, boolean handleProperties)
	{
		//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		{
			//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			boolean __temp_executeDef1 = true;
			//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			switch (field.hashCode())
			{
				case 1005083856:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("cachedIndex")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this.cachedIndex = ((int) (value) );
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return value;
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 325636987:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("nBuckets")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this.nBuckets = ((int) (value) );
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return value;
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case -553141795:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("cachedKey")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this.cachedKey = ((int) (value) );
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return value;
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 3530753:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("size")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this.size = ((int) (value) );
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return value;
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case -1690761732:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("upperBound")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this.upperBound = ((int) (value) );
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return value;
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case -394102484:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("nOccupied")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this.nOccupied = ((int) (value) );
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return value;
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
			}
			
			//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			if (__temp_executeDef1) 
			{
				//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				return super.__hx_setField_f(field, value, handleProperties);
			}
			else
			{
				//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		{
			//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			boolean __temp_executeDef1 = true;
			//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			switch (field.hashCode())
			{
				case 1005083856:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("cachedIndex")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this.cachedIndex = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return value;
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 97513095:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("flags")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this.flags = ((int[]) (value) );
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return value;
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case -553141795:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("cachedKey")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this.cachedKey = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return value;
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 91023059:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("_keys")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this._keys = ((int[]) (value) );
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return value;
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case -1690761732:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("upperBound")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this.upperBound = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return value;
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 3612018:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("vals")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this.vals = ((T[]) (value) );
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return value;
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case -394102484:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("nOccupied")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this.nOccupied = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return value;
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 325636987:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("nBuckets")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this.nBuckets = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return value;
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 3530753:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("size")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this.size = ((int) (haxe.lang.Runtime.toInt(value)) );
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return value;
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
			}
			
			//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			if (__temp_executeDef1) 
			{
				//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		{
			//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			boolean __temp_executeDef1 = true;
			//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			switch (field.hashCode())
			{
				case -934437708:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("resize")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "resize")) );
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 97513095:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("flags")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return this.flags;
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 102230:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("get")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "get")) );
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 91023059:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("_keys")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return this._keys;
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case -1097094790:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("lookup")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "lookup")) );
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 3612018:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("vals")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return this.vals;
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 113762:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("set")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "set")) );
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 325636987:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("nBuckets")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return this.nBuckets;
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 1005083856:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("cachedIndex")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return this.cachedIndex;
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 3530753:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("size")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return this.size;
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case -553141795:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("cachedKey")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return this.cachedKey;
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case -394102484:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("nOccupied")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return this.nOccupied;
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case -1690761732:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("upperBound")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return this.upperBound;
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
			}
			
			//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			if (__temp_executeDef1) 
			{
				//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public double __hx_getField_f(java.lang.String field, boolean throwErrors, boolean handleProperties)
	{
		//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		{
			//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			boolean __temp_executeDef1 = true;
			//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			switch (field.hashCode())
			{
				case 1005083856:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("cachedIndex")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return ((double) (this.cachedIndex) );
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 325636987:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("nBuckets")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return ((double) (this.nBuckets) );
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case -553141795:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("cachedKey")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return ((double) (this.cachedKey) );
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 3530753:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("size")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return ((double) (this.size) );
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case -1690761732:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("upperBound")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return ((double) (this.upperBound) );
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case -394102484:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("nOccupied")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return ((double) (this.nOccupied) );
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
			}
			
			//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			if (__temp_executeDef1) 
			{
				//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				return super.__hx_getField_f(field, throwErrors, handleProperties);
			}
			else
			{
				//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, java.lang.Object[] dynargs)
	{
		//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		{
			//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			boolean __temp_executeDef1 = true;
			//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			switch (field.hashCode())
			{
				case -934437708:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("resize")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this.resize(((int) (haxe.lang.Runtime.toInt(dynargs[0])) ));
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 113762:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("set")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						this.set(((int) (haxe.lang.Runtime.toInt(dynargs[0])) ), ((T) (dynargs[1]) ));
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case 102230:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("get")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return this.get(((int) (haxe.lang.Runtime.toInt(dynargs[0])) ));
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
				case -1097094790:
				{
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					if (field.equals("lookup")) 
					{
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						__temp_executeDef1 = false;
						//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
						return this.lookup(((int) (haxe.lang.Runtime.toInt(dynargs[0])) ));
					}
					
					//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
					break;
				}
				
				
			}
			
			//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
			if (__temp_executeDef1) 
			{
				//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		baseArr.push("cachedIndex");
		//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		baseArr.push("cachedKey");
		//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		baseArr.push("upperBound");
		//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		baseArr.push("nOccupied");
		//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		baseArr.push("size");
		//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		baseArr.push("nBuckets");
		//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		baseArr.push("vals");
		//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		baseArr.push("_keys");
		//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		baseArr.push("flags");
		//line 34 "C:\\Motion-Twin\\Haxe\\std\\java\\_std\\haxe\\ds\\IntMap.hx"
		super.__hx_getFields(baseArr);
	}
	
	
}


